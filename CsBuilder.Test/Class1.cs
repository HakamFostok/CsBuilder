//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Disposer source generator
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using ValueTaskAlias = global::System.Threading.Tasks.ValueTask;

namespace Project
{
    partial class MyClass
    {
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        private bool disposed = false;
        protected bool Disposed => disposed;

        ~MyClass()
        {
            Dispose(false);
        }
    }

    partial class MyClass : global::System.IDisposable
    {
        private global::System.Action? DisposeManaged;
        private global::System.Action? DisposeUnmanaged;

        protected virtual void Dispose(bool disposing)
        {
            if (!disposed)
            {
                return;
            }

            if (disposing)
            {
                DisposeManaged?.Invoke();
            }
            DisposeUnmanaged?.Invoke();

            disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            global::System.GC.SuppressFinalize(this);
        }
    }

    partial class MyClass : global::System.IAsyncDisposable
    {
        private global::System.Func<ValueTaskAlias>? DisposeManagedAsync;
        private global::System.Func<ValueTaskAlias>? DisposeUnmanagedAsync;

        protected virtual async ValueTaskAlias DisposeAsync(bool disposing)
        {
            if (!disposed)
            {
                await ValueTaskAlias.FromResult(ValueTask.CompletedTask);
            }

            if (disposing)
            {
                await (DisposeManagedAsync?.Invoke() ?? ValueTaskAlias.CompletedTask);
            }
            await (DisposeUnmanagedAsync?.Invoke() ?? ValueTaskAlias.CompletedTask);

            disposed = true;
        }

        public async ValueTaskAlias DisposeAsync()
        {
            await DisposeAsync(true);
            global::System.GC.SuppressFinalize(this);
        }
    }

}
